{"version":3,"file":"index.mjs","sources":["../lib/dmeanpn.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dsumpw from '@stdlib/blas-ext-base-dsumpw' ;\nimport dapxsumpw from '@stdlib/blas-ext-base-dapxsumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dmeanpn( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction dmeanpn( N, x, stride ) {\n\tvar mu;\n\tvar c;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// Compute an estimate for the mean:\n\tmu = dsumpw( N, x, stride ) / N;\n\n\t// Compute an error term:\n\tc = dapxsumpw( N, -mu, x, stride ) / N;\n\n\treturn mu + c;\n}\n\n\n// EXPORTS //\n\nexport default dmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsumpw } from '@stdlib/blas-ext-base-dsumpw' ;\nimport { ndarray as dapxsumpw } from '@stdlib/blas-ext-base-dapxsumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dmeanpn( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction dmeanpn( N, x, stride, offset ) {\n\tvar mu;\n\tvar c;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\t// Compute an estimate for the mean:\n\tmu = dsumpw( N, x, stride, offset ) / N;\n\n\t// Compute an error term:\n\tc = dapxsumpw( N, -mu, x, stride, offset ) / N;\n\n\treturn mu + c;\n}\n\n\n// EXPORTS //\n\nexport default dmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dmeanpn from './dmeanpn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dmeanpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dmeanpn;\n"],"names":["dmeanpn","N","x","stride","mu","NaN","dsumpw","dapxsumpw","offset","setReadOnly","ndarray"],"mappings":";;gVAsDA,SAASA,EAASC,EAAGC,EAAGC,GACvB,IAAIC,EAGJ,OAAKH,GAAK,EACFI,IAEG,IAANJ,GAAsB,IAAXE,EACRD,EAAG,IAGXE,EAAKE,EAAQL,EAAGC,EAAGC,GAAWF,GAG1BM,EAAWN,GAAIG,EAAIF,EAAGC,GAAWF,ECZtC,SAASD,EAASC,EAAGC,EAAGC,EAAQK,GAC/B,IAAIJ,EAGJ,OAAKH,GAAK,EACFI,IAEG,IAANJ,GAAsB,IAAXE,EACRD,EAAGM,IAGXJ,EAAKE,EAAQL,EAAGC,EAAGC,EAAQK,GAAWP,GAGlCM,EAAWN,GAAIG,EAAIF,EAAGC,EAAQK,GAAWP,ECzC9CQ,EAAAT,EAAA,UAAAU"}